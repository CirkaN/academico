<?php

namespace Tests\Feature\Http\Controllers\Admin;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;
use App\Models\Book;
use App\Models\User;

/**
 * @see \App\Http\Controllers\Admin\BookCrudController
 */
class BookCrudControllerTest extends TestCase
{
    use RefreshDatabase;

    public function setUp(): void
    {
        parent::setUp();

        $this->seed('TestSeeder');
    }

    private function logInAdmin()
    {
        $user = factory(User::class)->create();
        $user->assignRole('admin');
        \Auth::guard(backpack_guard_name())->login($user);
    }

    /**
     * @test
     */
    public function create_is_permitted_for_authorized_users_only()
    {
        // unauthorized users should receive a 302
        $response = $this->get(route('book.create'));
        $response->assertStatus(302);

        // create model but do not persist to DB
        $book = factory(Book::class)->make();

        $response = $this->post(route('book.store'), $book->toArray());
        $response->assertStatus(302);
        $this->assertDatabaseMissing('books', $book->toArray());
        
        $this->logInAdmin();
        $response = $this->post(route('book.store'), $book->toArray());
        $this->assertDatabaseHas('books', $book->toArray());
    }

    /**
     * @test
     */
    public function destroy_is_permitted_for_authorized_users_only()
    {
        $book = factory(Book::class)->create();
        
        $response = $this->delete(route('book.destroy', ['id' => $book->id]));
        $this->assertDatabaseHas('books', $book->toArray());

        $this->logInAdmin();

        $response = $this->delete(route('book.destroy', ['id' => $book->id]));
        $this->assertDatabaseMissing('books', $book->toArray());
    }

    /**
     * @test
     */
    public function edit_is_permitted_for_authorized_users_only()
    {
        $book = factory(Book::class)->create();
        
        // create edited model but do not persist to DB
        $book2 = factory(Book::class)->make();

        // unauthorized users may not access the edit screen
        $response = $this->get(route('book.edit', ['id' => $book->id]));
        $response->assertStatus(302);
        
        // guests may not edit
        $response = $this->put(route('book.update', ['id' => $book->id], ['name' => $book2->name, 'price' => $book2->price, 'product_code' => $book2->product_code]));
        $this->assertFalse($book->name == $book2->name);

        // authorized users may see the edit screen
        $this->logInAdmin();
        $response = $this->get(route('book.edit', ['id' => $book->id]));
        $response->assertOk();

        // authorized users may edit
        $response = $this->putJson(route('book.update', ['id' => $book->id]), ['name' => 'my updated name']);
        //$this->assertTrue($book->name == 'my updated name');
        $this->markTestIncomplete('This test is currently not working.');
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response()
    {
        $book = factory(Book::class)->create();
        $this->logInAdmin();
        $response = $this->get(route('book.index'));
        $response->assertOk();
    }

    public function search_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->post(route('book.search'), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_details_row_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('book.showDetailsRow', ['id' => $id]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->post(route('book.store'), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->put(route('book.update', ['id' => $id]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    // test cases...
}
